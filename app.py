# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179NiQHYGlY5KmyB_AzupnJ3F2Z2GZpOz
"""

!pip install pandas scikit-learn

from google.colab import files
uploaded = files.upload()

import json
with open("products.json", "r") as f:
    products = json.load(f)

with open("products.json", "w") as f:
    json.dump(products, f, indent=2)

print("products.json completed.")

with open("products.json", "r") as f:
    loaded = json.load(f)

print(type(loaded), len(loaded))
print(loaded[0])

with open("products.json", "r") as f:
    products = json.load(f)

print(f"Total products: {len(products)}")

for p in products:
    print(f"{p['name']} - ${p['price']} - Category: {p['category']} - Rating: {p['rating']}")

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

# Mock training data with weekend_sale as a feature
data = pd.DataFrame({
    "base_price": [50, 80, 120, 200, 500, 1000, 150, 300, 75, 250],
    "rating": [4.0, 4.5, 4.7, 4.2, 4.8, 4.3, 3.9, 4.6, 4.1, 4.9],
    "category": ["shoes", "shoes", "electronics", "electronics", "computers",
                 "computers", "home", "outdoors", "fitness", "electronics"],
    "demand_level": [2, 3, 3, 2, 3, 1, 1, 2, 1, 3],
    "weekend_sale": [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],  # alternating yes/no
})

# Calculate adjusted_price for training (rule-based simulation)
adjusted_prices = []
for i, row in data.iterrows():
    price = row["base_price"]
    if row["rating"] >= 4.5:
        price *= 1.05
    if row["category"] == "electronics":
        price *= 1.03
    if row["base_price"] > 500:
        price *= 0.95
    if row["weekend_sale"] == 1:
        price *= 0.90
    adjusted_prices.append(price)

data["adjusted_price"] = adjusted_prices

# Encode category
label_encoder = LabelEncoder()
data["category_encoded"] = label_encoder.fit_transform(data["category"])

# Features & target
X = data[["base_price", "rating", "category_encoded", "demand_level", "weekend_sale"]]
y = data["adjusted_price"]

# Train model
model = LinearRegression()
model.fit(X, y)

print("Model trained. Coefficients:", model.coef_)

def estimate_demand_level(product):
    demand = 2  # default medium
    if product['category'].lower() in ["electronics", "computers"]:
        demand = 3
    if product['rating'] > 4.5:
        demand = min(3, demand + 1)
    if product['price'] < 50:
        demand = 1
    return demand

# User inputs for filters
category_filter = input("Enter category (or leave blank for all): ").strip().lower()
max_price_input = input("Enter maximum price (or leave blank for no limit): ").strip()

max_price = None
if max_price_input != "":
    try:
        max_price = float(max_price_input)
    except ValueError:
        print("Invalid price entered. Ignoring price filter.")

weekend_sale_input = input("Is weekend sale active? (yes/no): ").strip().lower()
weekend_sale = (weekend_sale_input == "yes")
weekend_flag = 1 if weekend_sale else 0

# Filter products
filtered_products = []
for p in products:
    category_match = (category_filter == "" or p['category'].lower() == category_filter)
    price_match = (max_price is None or p['price'] <= max_price)
    if category_match and price_match:
        filtered_products.append(p)

# Apply rule-based, ML pricing & choose final price
print(f"\nFound {len(filtered_products)} products matching your filters:\n")
for p in filtered_products:
    original_price = p['price']
    rule_price = original_price

    # Rule-based logic
    if p['rating'] >= 4.5:
        rule_price *= 1.05
    if p['category'].lower() == "electronics":
        rule_price *= 1.03
    if original_price > 500:
        rule_price *= 0.95
    if weekend_sale:
        rule_price *= 0.90

    # ML logic
    demand_level = estimate_demand_level(p)
    category_num = label_encoder.transform([p['category']])[0]
    X_new_df = pd.DataFrame(
    [[original_price, p['rating'], category_num, demand_level, weekend_flag]],
    columns=["base_price", "rating", "category_encoded", "demand_level", "weekend_sale"]
)
    ml_price = model.predict(X_new_df)[0]


    # Decide final price
    diff_percentage = abs(ml_price - rule_price) / rule_price * 100
    if diff_percentage <= 5:
        final_price = ml_price
        reason = "ML chosen (within Â±5% of rule-based)"
    elif ml_price < rule_price * 0.85:
        final_price = rule_price
        reason = "Rule-based chosen (ML much lower)"
    elif ml_price > rule_price * 1.15:
        final_price = rule_price
        reason = "Rule-based chosen (ML much higher)"
    else:
        final_price = ml_price
        reason = "ML chosen (normal range)"

    # Print results
    print(f"{p['name']}")
    print(f"  Category: {p['category']}")
    print(f"  Rating: {p['rating']}")
    print(f"  Estimated Demand Level: {demand_level}")
    print(f"  Original Price: ${original_price:.2f}")
    print(f"  Rule-based Price: ${rule_price:.2f}")
    print(f"  ML Predicted Price: ${ml_price:.2f}")
    print(f"  Final Price Used: ${final_price:.2f}  <-- {reason}\n")